def configuration = [vaultUrl: params.VAULT_HOST,
						 vaultCredentialId: params.VAULT_CREDENTIAL_ID,
						 engineVersion: 2]

def secrets = [
  [  path: 'jenkin-kv/database', engineVersion: 2,
     secretValues: [[envVar: 'MYSQL_DATABASE', vaultKey: 'MYSQL_DATABASE'], [envVar: 'MYSQL_USER', vaultKey: 'MYSQL_USER'],[envVar: 'MYSQL_PASSWORD', vaultKey: 'MYSQL_PASSWORD'], [envVar: 'MYSQL_ROOT_PASSWORD', vaultKey: 'MYSQL_ROOT_PASSWORD']]
  ],
  [  path: 'jenkin-kv/server', engineVersion: 2,
     secretValues: [[envVar: 'url', vaultKey: 'url']]
  ]
]
pipeline {
    agent any
    environment {     
        DOCKERHUB_CREDENTIALS = credentials('docker_cred')
        DOMAIN = "localhost:8080"
        SERVER_USER = "app"
    } 

    stages{
        stage('Vault') {
            steps {
              withVault([configuration:configuration, vaultSecrets: secrets]) {
                sh "echo ${env.username}"
              }
            }
        }
        stage("Get source") {
            steps{
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/trantrongdai/shorted-link-pro.git']])
            }
        }

        stage ('Deploy') {
            steps{
                script {
                    sh 'pwd'
                    withVault([configuration:configuration, vaultSecrets: secrets]) {
                        sh "echo ${env.MYSQL_DATABASE}"
                        sh "echo server-domain = ${env.url}"
                        // Remove existed container
                        sshagent(credentials : ['app-ssh']) {
                            sh """
                                whoami
                                pwd
                                ssh -o StrictHostKeyChecking=no ${SERVER_USER}@$url uptime \
                                " docker rm \$(docker ps -a -f status=exited -q) "
                            """
                        }
                        sshagent(credentials : ['app-ssh']) {
                            sh """
                                pwd
                                whoami
                                scp -o StrictHostKeyChecking=no db/docker-compose-sql.yml ${SERVER_USER}@$url:/home/${SERVER_USER}
                            """

                            sh """
                                pwd
                                whoami
                                ssh -o StrictHostKeyChecking=no ${SERVER_USER}@$url uptime \
                                " pwd \
                                && MYSQL_DATABASE=${MYSQL_DATABASE} MYSQL_USER=${MYSQL_USER} MYSQL_PASSWORD=${MYSQL_PASSWORD} MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} docker compose -f /home/${SERVER_USER}/docker-compose-sql.yml up -d || true "
                            """
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            echo 'Build succeeded!'
        }
        failure {
            echo 'Build failed!'
        }
        always {
            echo 'Cleaning up resources...'
            sh 'docker logout'
        }
  }
}
